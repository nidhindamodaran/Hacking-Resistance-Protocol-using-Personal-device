/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewMessageGUI.java
 *
 * Created on May 20, 2010, 4:36:27 PM
 */
package com.hrp.main.gui;

import com.hrp.mail.utils.MailBean;
import com.hrp.mail.utils.SendMail;
import com.hrp.mail.utils.Utilities;
import com.hrp.util.Validation;
import java.io.File;
import java.util.Date;
import java.util.Vector;
import javax.mail.Address;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Staff
 */
public class NewMessageGUI extends javax.swing.JDialog {

    private Vector attachFilePaths = new Vector();
    private Vector metaData = new Vector();
    private DefaultListModel attachListModel = null;
    private MailBean mailBean = null;
    public static String saved = "";
    private String messageContent = "";
    private File mailDir = null;
    private boolean noError = true;

    /**
     * Creates new form NewMessageGUI
     */
    public NewMessageGUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        attachListModel = new DefaultListModel();
        errorFrom.setText("");
        errorPassword.setText("");
        errorTo.setText("");
        errorCc.setText("");
        errorBcc.setText("");

    }

    public NewMessageGUI() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addressPanel = new javax.swing.JPanel();
        toTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ccTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        bccTextField = new javax.swing.JTextField();
        subjectTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        attachButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        attachmentsList = new javax.swing.JList();
        removeButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        fromTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        errorFrom = new javax.swing.JLabel();
        errorPassword = new javax.swing.JLabel();
        errorTo = new javax.swing.JLabel();
        errorCc = new javax.swing.JLabel();
        errorBcc = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTextAreaEditorPane = new javax.swing.JEditorPane();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Message");

        addressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        toTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                toTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                toTextFieldFocusLost(evt);
            }
        });

        jLabel1.setText("To :");

        jLabel2.setText("Cc :");

        ccTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ccTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ccTextFieldFocusLost(evt);
            }
        });

        jLabel3.setText("Bcc :");

        bccTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bccTextFieldActionPerformed(evt);
            }
        });
        bccTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bccTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bccTextFieldFocusLost(evt);
            }
        });

        jLabel4.setText("Subject :");

        attachButton.setText("Attach");
        attachButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Attachments :");

        attachmentsList.setBackground(new java.awt.Color(236, 233, 216));
        jScrollPane2.setViewportView(attachmentsList);

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("From :");

        fromTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromTextFieldActionPerformed(evt);
            }
        });
        fromTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fromTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fromTextFieldFocusLost(evt);
            }
        });

        jLabel8.setText("Password :");

        passwordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFieldFocusLost(evt);
            }
        });

        errorFrom.setForeground(new java.awt.Color(255, 0, 0));
        errorFrom.setText("jLabel9");

        errorPassword.setForeground(new java.awt.Color(255, 51, 51));
        errorPassword.setText("jLabel10");

        errorTo.setForeground(new java.awt.Color(255, 51, 51));
        errorTo.setText("jLabel11");

        errorCc.setForeground(new java.awt.Color(255, 51, 51));
        errorCc.setText("jLabel12");

        errorBcc.setForeground(new java.awt.Color(255, 51, 51));
        errorBcc.setText("jLabel13");

        javax.swing.GroupLayout addressPanelLayout = new javax.swing.GroupLayout(addressPanel);
        addressPanel.setLayout(addressPanelLayout);
        addressPanelLayout.setHorizontalGroup(
            addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addressPanelLayout.createSequentialGroup()
                        .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                            .addComponent(fromTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorPassword)
                            .addComponent(errorFrom)))
                    .addGroup(addressPanelLayout.createSequentialGroup()
                        .addComponent(toTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorTo))
                    .addGroup(addressPanelLayout.createSequentialGroup()
                        .addComponent(ccTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorCc))
                    .addGroup(addressPanelLayout.createSequentialGroup()
                        .addComponent(bccTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorBcc))
                    .addComponent(subjectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addressPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeButton)
                            .addComponent(attachButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addressPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {attachButton, removeButton});

        addressPanelLayout.setVerticalGroup(
            addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addressPanelLayout.createSequentialGroup()
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(fromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorFrom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorPassword))
                .addGap(13, 13, 13)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(errorTo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ccTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(errorCc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bccTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(errorBcc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(subjectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(addressPanelLayout.createSequentialGroup()
                        .addComponent(attachButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(removeButton)
                        .addContainerGap())
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        sendButton.setText("Send");
        sendButton.setFocusable(false);
        sendButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sendButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        messageTextAreaEditorPane.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(messageTextAreaEditorPane);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hrp/icon/composeMail.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(addressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(sendButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, sendButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sendButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if (validateFields()) {
            newMessage();
            new Thread(new SendMail(mailBean, messageContent)).start();
            WaitingForSendingGUI waitingForSendingGUI = new WaitingForSendingGUI(this, true, "");
            resetFields();
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    public void newMessage() {
        try {

            mailBean = new MailBean();
            Address[] toAddress = null;
            Address[] ccAddress = null;
            Address[] bccAddress = null;

            String[] fromAddressStr = {fromTextField.getText()}; // to set from address

            mailBean.setPassword(new String(passwordField.getPassword()));
            String toAddressStr = toTextField.getText().trim();
            if (toAddressStr != null && !toAddressStr.equals("")) {
                String[] toAddressStrArr = toAddressStr.split(",");
                toAddress = new Utilities().getStringByAddress(toAddressStrArr);
            }
            String ccAddressStr = ccTextField.getText();
            if (ccAddressStr != null && !ccAddressStr.equals("")) {
                String[] ccAddressStrArr = ccAddressStr.split(",");
                ccAddress = new Utilities().getStringByAddress(ccAddressStrArr);
            }
            String bccAddressStr = bccTextField.getText();
            if (bccAddressStr != null && !bccAddressStr.equals("")) {
                String[] bccAddressStrArr = bccAddressStr.split(",");
                bccAddress = new Utilities().getStringByAddress(bccAddressStrArr);
            }
            String subject = subjectTextField.getText(); // ask if subject should be blank if it is blank
            messageContent = messageTextAreaEditorPane.getText(); //  ask if content should be blank if it is blank
            mailBean = new MailBean();
            mailBean.setFromAddress(new Utilities().getStringByAddress(fromAddressStr));
            mailBean.setToAddress(toAddress);
            mailBean.setBccAddress(bccAddress);
            mailBean.setCcAddress(ccAddress);
            mailBean.setPassword(new String(passwordField.getPassword()));
            mailBean.setSubject(subject);
            mailBean.setUserEmail(fromTextField.getText());
            //mailBean.setContent(content);// how to manage this
            mailBean.setSentOrSavedDate(new Date());
            if (attachFilePaths.size() == 0 && attachmentsList.getModel().getSize() != 0) {
                for (int i = 0; i < attachmentsList.getModel().getSize(); i++) {
                    attachFilePaths.add(new File(mailDir, (String) attachmentsList.getModel().getElementAt(i)).getAbsolutePath());
                }
            }
            mailBean.setAttachedFiles(attachFilePaths);



        } catch (AddressException ex) {
            JOptionPane.showMessageDialog(this, "Please provide a valid email address", "Invalid Email", WIDTH);
        }
    }
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void attachButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachButtonActionPerformed
        // TODO add your handling code here:
        String fileName = "";
        JFileChooser chooser = new JFileChooser();
        int value = chooser.showOpenDialog(this);
        if (value == JFileChooser.APPROVE_OPTION) {
            fileName = chooser.getSelectedFile().getAbsolutePath();
            attachFilePaths.addElement(fileName);
            System.out.println("attachFilePaths : " + attachFilePaths);
            attachListModel.addElement(fileName);
            attachmentsList.setModel(attachListModel);
        }
    }//GEN-LAST:event_attachButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        int index = attachmentsList.getSelectedIndex();
        System.out.println("index : " + index);
        if (index >= 0) {
            attachListModel.remove(index);
            attachmentsList.setModel(attachListModel);
            attachFilePaths.remove(index);
            System.out.println("attachFilePaths after removal: " + attachFilePaths);
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void fromTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromTextFieldActionPerformed

    private void fromTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fromTextFieldFocusLost
        // TODO add your handling code here:

        if (!Validation.validateEmail(fromTextField.getText())) {
            errorFrom.setText("Invalid From.");
        } else {
            errorFrom.setText("");
        }
    }//GEN-LAST:event_fromTextFieldFocusLost

    private void passwordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusLost
        // TODO add your handling code here:
        if (passwordField.getPassword().length == 0) {
            errorPassword.setText("Invalid Password.");
        } else {
            errorPassword.setText("");
        }


    }//GEN-LAST:event_passwordFieldFocusLost

    private void toTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_toTextFieldFocusLost
        // TODO add your handling code here: 
        if (!Validation.validateEmail(toTextField.getText())) {
            errorTo.setText("Invalid TO.");
        } else {
            errorTo.setText("");
        }
    }//GEN-LAST:event_toTextFieldFocusLost

    private void ccTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ccTextFieldFocusLost
        // TODO add your handling code here:
        if (ccTextField.getText().length() != 0 && !Validation.validateEmail(ccTextField.getText())) {
            errorCc.setText("Invalid CC.");
        } else {
            errorCc.setText("");
        }

    }//GEN-LAST:event_ccTextFieldFocusLost

    private void bccTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bccTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bccTextFieldActionPerformed

    private void passwordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldFocusGained

    private void toTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_toTextFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_toTextFieldFocusGained

    private void ccTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ccTextFieldFocusGained
    }//GEN-LAST:event_ccTextFieldFocusGained

    private void bccTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bccTextFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_bccTextFieldFocusGained

    private void fromTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fromTextFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_fromTextFieldFocusGained

    private void bccTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bccTextFieldFocusLost
        // TODO add your handling code here:

        if (bccTextField.getText().length() != 0 && !Validation.validateEmail(bccTextField.getText())) {
            errorBcc.setText("Invalid BCC.");
        } else {
            errorBcc.setText("");
        }
    }//GEN-LAST:event_bccTextFieldFocusLost

    public void setValues(Address[] fromAddress, String subject, byte[] buffer,
            Vector attachments, File mailDir) {
        subjectTextField.setText(subject);
        this.mailDir = mailDir;
        if (fromAddress != null) {
            String toAddress = ((InternetAddress) fromAddress[0]).getAddress();
            toTextField.setText(toAddress);

        }
        if (buffer != null) {
            messageTextAreaEditorPane.setText(new String(buffer));
            messageTextAreaEditorPane.setCaretPosition(0);
            messageTextAreaEditorPane.updateUI();
            if (attachments != null) {
                attachmentsList.setListData(attachments);
                attachmentsList.updateUI();
            }
        }
    }

    public void setToAddressField(StringBuffer emailID) {
        toTextField.setText(emailID.toString());
    }

    public void setCcAddressField(StringBuffer emailID) {
        ccTextField.setText(emailID.toString());
    }

    public void setBccAddressField(StringBuffer emailID) {
        bccTextField.setText(emailID.toString());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NewMessageGUI dialog = new NewMessageGUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addressPanel;
    private javax.swing.JButton attachButton;
    private javax.swing.JList attachmentsList;
    private javax.swing.JTextField bccTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField ccTextField;
    private javax.swing.JLabel errorBcc;
    private javax.swing.JLabel errorCc;
    private javax.swing.JLabel errorFrom;
    private javax.swing.JLabel errorPassword;
    private javax.swing.JLabel errorTo;
    private javax.swing.JTextField fromTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JEditorPane messageTextAreaEditorPane;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField subjectTextField;
    private javax.swing.JTextField toTextField;
    // End of variables declaration//GEN-END:variables

    public void resetFields() {
        fromTextField.setText("");
        passwordField.setText("");
        toTextField.setText("");
        ccTextField.setText("");
        bccTextField.setText("");
        subjectTextField.setText("");
        messageTextAreaEditorPane.setText("");
        attachListModel.removeAllElements();
    }

    private boolean validateFields() {
        String paString = new String(passwordField.getPassword());
        if (!Validation.validateEmail(fromTextField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "please provide a valid 'From' email id ", "Invalid mail id", JOptionPane.WARNING_MESSAGE);
            return false;
        } else if (!Validation.validateField(paString)) {
            JOptionPane.showMessageDialog(this,
                    "please provide a password String ", "Invalid Password", JOptionPane.WARNING_MESSAGE);
            return false;
        } else if (!Validation.validateEmail(toTextField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "please provide a valid  'To' email id ", "Invalid mail id", JOptionPane.WARNING_MESSAGE);
            return false;
        } else if (!validateEmail(ccTextField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "please provide a valid  'CC' email String ", "Invalid mail id", JOptionPane.WARNING_MESSAGE);
            return false;

        } else if (!validateEmail(bccTextField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "please provide a valid  'BCC' email String ", "Invalid mail id", JOptionPane.WARNING_MESSAGE);
            return false;

        } else {
            return true;
        }

    }

    private boolean validateEmail(String email) {
        boolean valid = false;
        if (email != null) {
            int atFirstPos = email.indexOf("@");
            int atLastPos = email.lastIndexOf("@");
            int dotLastPos = email.lastIndexOf(".");
            if ((atFirstPos > 0 && atFirstPos == atLastPos
                    && atFirstPos < dotLastPos) || email.equals("")) {
                valid = true;
            }
        }
        return valid;
    }
}
