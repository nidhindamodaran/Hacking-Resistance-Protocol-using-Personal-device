/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeataMain.java
 *
 * Created on Mar 8, 2011, 11:28:09 AM
 */
package com.hrp.main.gui;

import com.hrp.bean.FileInfoBean;
import com.hrp.ecry.AESEncryption;
import com.hrp.file.mgr.FileUpdateManager;
import com.hrp.util.AppVariables;
import com.hrp.util.Utilities;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Staff
 */
public class Main extends javax.swing.JFrame implements DropTargetListener {

    /**
     * Creates new form DeataMain
     */
    Utilities utilities = new Utilities();
    AESEncryption encryption = new AESEncryption();
    private File selectedFile = null;
    private TrayIconClass trayIconClass = null;
    static boolean opened = false;

    public Main() {
        initComponents();
        init();
        fileTable.setDropTarget(new DropTarget(fileTable, this));
        folderTree.setDropTarget(new DropTarget(folderTree, this));
        // create tray icon
        trayIconClass = new TrayIconClass(this, utilities);
        trayIconClass.createTrayIcon();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        openMenuItem = new javax.swing.JMenuItem();
        openWithMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        refreshMenuItem = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        folderTree = new javax.swing.JTree();
        tableScrollPane = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        extractToButton = new javax.swing.JButton();
        uploadFileButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        messageButton = new javax.swing.JButton();
        msgSettingsButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        sendMailButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        changeDirectoryButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        inboxMenuItem = new javax.swing.JMenuItem();
        mailSettingsMenuItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jAboutUsMenuItem = new javax.swing.JMenuItem();

        openMenuItem.setText("Open File");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(openMenuItem);

        openWithMenuItem.setText("Open File With");
        openWithMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openWithMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(openWithMenuItem);

        deleteMenuItem.setText("Delete File");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(deleteMenuItem);

        refreshMenuItem.setText("Refresh");
        refreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(refreshMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Hacking Resistance Protocol");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jSplitPane1.setDividerLocation(140);

        folderTree.setDragEnabled(true);
        folderTree.setDropMode(javax.swing.DropMode.INSERT);
        folderTree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                folderTreeTreeWillExpand(evt);
            }
        });
        folderTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                folderTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(folderTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Name", "Size", "Last Modified"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        fileTable.setDragEnabled(true);
        fileTable.setDropMode(javax.swing.DropMode.INSERT);
        fileTable.setShowHorizontalLines(false);
        fileTable.setShowVerticalLines(false);
        fileTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileTableMouseClicked(evt);
            }
        });
        tableScrollPane.setViewportView(fileTable);
        fileTable.getColumnModel().getColumn(1).setMinWidth(100);
        fileTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        fileTable.getColumnModel().getColumn(1).setMaxWidth(100);
        fileTable.getColumnModel().getColumn(2).setMinWidth(150);
        fileTable.getColumnModel().getColumn(2).setPreferredWidth(150);
        fileTable.getColumnModel().getColumn(2).setMaxWidth(150);

        jSplitPane1.setRightComponent(tableScrollPane);

        jToolBar1.setRollover(true);

        extractToButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hrp/icon/encryption-icon.png"))); // NOI18N
        extractToButton.setToolTipText("Decrypt To...");
        extractToButton.setFocusable(false);
        extractToButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        extractToButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        extractToButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractToButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(extractToButton);

        uploadFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hrp/icon/upload.png"))); // NOI18N
        uploadFileButton.setToolTipText("Upload File..");
        uploadFileButton.setFocusable(false);
        uploadFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        uploadFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        uploadFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(uploadFileButton);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hrp/icon/openFile.png"))); // NOI18N
        openButton.setToolTipText("Open File...");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openButton);

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hrp/icon/File-Delete-icon.png"))); // NOI18N
        deleteButton.setToolTipText("Delete File...");
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(deleteButton);
        jToolBar1.add(jSeparator1);

        messageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hrp/icon/inbox.png"))); // NOI18N
        messageButton.setToolTipText("inbox");
        messageButton.setFocusable(false);
        messageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        messageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        messageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(messageButton);

        msgSettingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hrp/icon/Compose Email32by32.png"))); // NOI18N
        msgSettingsButton.setToolTipText("save mail settings");
        msgSettingsButton.setFocusable(false);
        msgSettingsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        msgSettingsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        msgSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msgSettingsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(msgSettingsButton);
        jToolBar1.add(jSeparator2);

        sendMailButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hrp/icon/red_mail_send32by32.png"))); // NOI18N
        sendMailButton.setFocusable(false);
        sendMailButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sendMailButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sendMailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMailButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(sendMailButton);
        jToolBar1.add(jSeparator3);

        changeDirectoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hrp/icon/change_directory.png"))); // NOI18N
        changeDirectoryButton.setToolTipText("Change Directory");
        changeDirectoryButton.setFocusable(false);
        changeDirectoryButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        changeDirectoryButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        changeDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeDirectoryButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(changeDirectoryButton);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        statusLabel.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(758, Short.MAX_VALUE)
                .addComponent(statusLabel)
                .addGap(130, 130, 130))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusLabel)
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Messages");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        inboxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK));
        inboxMenuItem.setText("Inbox");
        inboxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inboxMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(inboxMenuItem);

        mailSettingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mailSettingsMenuItem.setText("Mail settings");
        mailSettingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailSettingsMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(mailSettingsMenuItem);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Help");

        jAboutUsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jAboutUsMenuItem.setText("About us");
        jAboutUsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAboutUsMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(jAboutUsMenuItem);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 926, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 926, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        opened = false;

    }//GEN-LAST:event_formWindowClosing

    private void folderTreeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_folderTreeTreeWillExpand
        DefaultMutableTreeNode mutableTreeNode = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();
        if (mutableTreeNode != null) {
            mutableTreeNode.removeAllChildren();
            Object userObj = mutableTreeNode.getUserObject();
            if (userObj instanceof File) {
                File[] dirs = ((File) userObj).listFiles();
                if (dirs != null) {
                    for (File dir : dirs) {
                        if (dir.isDirectory()) {
                            DefaultMutableTreeNode dirNode = new DefaultMutableTreeNode(dir);
                            mutableTreeNode.add(dirNode);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Error : \n"
                            + " The Files in the folder "
                            + "might have been deleted externally ",
                            "File Does not found ", JOptionPane.OK_OPTION);
                }
            }
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    folderTree.updateUI();
                }
            });
        }
    }//GEN-LAST:event_folderTreeTreeWillExpand

    private void folderTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_folderTreeValueChanged
        DefaultMutableTreeNode mutableTreeNode = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();
        if (mutableTreeNode != null) {
            Object userObj = mutableTreeNode.getUserObject();
            if (userObj instanceof File) {
                selectedFile = (File) userObj;
                reloadFileTable(selectedFile);
            }

        }
    }//GEN-LAST:event_folderTreeValueChanged

    private void fileTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileTableMouseClicked
        int selectedIdex = fileTable.getSelectedRow();
        if (selectedIdex != -1 && evt.getClickCount() == 2 && evt.getButton() == 1) {
            try {
                File file = (File) fileTable.getValueAt(selectedIdex, 0);
                File decrFile = encryption.decryptFile(file, new File("temp"), AppVariables.settingsInfo.getIMEI());
                if (openFile(decrFile)) {
                    FileUpdateManager fileUpdateManager = new FileUpdateManager(decrFile, file);
                    new Thread(fileUpdateManager).start();
                    decrFile.deleteOnExit();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (selectedIdex != -1 && evt.getClickCount() == 1) {
            File file = (File) fileTable.getValueAt(selectedIdex, 0);
            statusLabel.setText(" File : " + file.getName());
        }
        if (evt.getButton() == 3 && selectedIdex != -1) {
            popupMenu.show(fileTable, evt.getX(), evt.getY());
        }

    }//GEN-LAST:event_fileTableMouseClicked

    private void uploadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFileButtonActionPerformed
        DefaultMutableTreeNode seletedNode = (DefaultMutableTreeNode) folderTree.getLastSelectedPathComponent();
        if (seletedNode != null) {
            File destDir = (File) seletedNode.getUserObject();
            JFileChooser chooser = new JFileChooser() {

                @Override
                public void approveSelection() {
                    DefaultMutableTreeNode seletedNode = (DefaultMutableTreeNode) folderTree.getLastSelectedPathComponent();
                    if (seletedNode != null) {
                        File destDir = (File) seletedNode.getUserObject();
                        String fileName = destDir.getAbsolutePath() + File.separator + getSelectedFile().getName();
                        if (new File(fileName).exists()) {
                            int op = JOptionPane.showConfirmDialog(this, "The File alerady exists do you want to over write", "The file exists", JOptionPane.OK_CANCEL_OPTION);
                            if (op == JOptionPane.OK_OPTION) {
                                super.approveSelection();
                            } else {
                            }
                        } else {
                            super.approveSelection();
                        }
                    }
                }
            };
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (chooser.showDialog(this, "Select File") == JFileChooser.APPROVE_OPTION) {
                try {
                    File selectedFile = chooser.getSelectedFile();
                    String fileName = destDir.getAbsolutePath() + File.separator + selectedFile.getName();
                    FileInfoBean fileInfoBean = new FileInfoBean();
                    fileInfoBean.setFileName(fileName);
                    AppVariables.settingsInfo.getFileInfos().put(fileName, fileInfoBean);
                    encryption.encryptFile(selectedFile, destDir, AppVariables.settingsInfo.getIMEI(), false);
                    JOptionPane.showMessageDialog(this,
                            selectedFile.getName() + "\nSuccessfully uploaded.",
                            "Upload File", JOptionPane.INFORMATION_MESSAGE);
                    if (!selectedFile.delete()) {
                        selectedFile.deleteOnExit();
                    }
                    reloadFileTable(destDir);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchPaddingException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidKeyException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalBlockSizeException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (BadPaddingException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(
                    this, "Please Select a folder", "Message", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_uploadFileButtonActionPerformed

    private void extractToButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractToButtonActionPerformed
        int selectedIdex = fileTable.getSelectedRow();
        if (selectedIdex != -1) {
            try {
                JFileChooser chooser = new JFileChooser();
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                if (chooser.showDialog(this, "Save") == JFileChooser.APPROVE_OPTION) {
                    File file = (File) fileTable.getValueAt(selectedIdex, 0);
                    if (checkForExist(file, chooser.getSelectedFile())) {
                        File decrFile = encryption.decryptFile(file, chooser.getSelectedFile(),
                                AppVariables.settingsInfo.getIMEI());
                        Desktop desktop = Desktop.getDesktop();
                        desktop.open(decrFile);
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_extractToButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        int selectedIdex = fileTable.getSelectedRow();
        if (selectedIdex != -1) {
            try {
                File file = (File) fileTable.getValueAt(selectedIdex, 0);
                File decrFile = encryption.decryptFile(file, new File("temp"), AppVariables.settingsInfo.getIMEI());

                if (openFile(decrFile)) {
                    FileUpdateManager fileUpdateManager = new FileUpdateManager(decrFile, file);
                    new Thread(fileUpdateManager).start();
                    decrFile.deleteOnExit();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Please select the file you want to open.",
                    "Open File", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int selectedIdex = fileTable.getSelectedRow();
        if (selectedIdex != -1) {
            File file = (File) fileTable.getValueAt(selectedIdex, 0);
            if (JOptionPane.showConfirmDialog(this, "Do you want to Delete: \n"
                    + file.getName(), "Delete File", JOptionPane.YES_NO_OPTION)
                    == JOptionPane.YES_OPTION) {
                if (file.delete()) {
                    JOptionPane.showMessageDialog(this,
                            file.getName() + " Successfully deleted.",
                            "Delete File", JOptionPane.INFORMATION_MESSAGE);
                    AppVariables.settingsInfo.getFileInfos().remove(file.getAbsolutePath());
                    if (selectedFile != null) {
                        reloadFileTable(selectedFile);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Please select file you want to delete.",
                    "Delete File", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void mailSettingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailSettingsMenuItemActionPerformed
        // TODO add your handling code here:
        MailSettingsJDialog mailSettingsJDialog = new MailSettingsJDialog(this, true);
        mailSettingsJDialog.setLocationRelativeTo(this);
        mailSettingsJDialog.setVisible(true);
    }//GEN-LAST:event_mailSettingsMenuItemActionPerformed

    private void inboxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inboxMenuItemActionPerformed
        // TODO add your handling code here:
        InboxJDialog inboxJDialog = new InboxJDialog(this, true);
        inboxJDialog.setLocationRelativeTo(this);
        inboxJDialog.setVisible(true);

    }//GEN-LAST:event_inboxMenuItemActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        statusLabel.setText(AppVariables.settingsInfo.getEncrHomeDir().getName());
        if (AppVariables.settingsInfo.getEncrHomeDir() != null) {
            reloadFileTable(AppVariables.settingsInfo.getEncrHomeDir());
        }

        opened = true;
    }//GEN-LAST:event_formWindowOpened

    private void messageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageButtonActionPerformed
        // TODO add your handling code here:
        InboxJDialog inboxJDialog = new InboxJDialog(this, true);
        inboxJDialog.setLocationRelativeTo(this);
        inboxJDialog.setVisible(true);

    }//GEN-LAST:event_messageButtonActionPerformed

    private void msgSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msgSettingsButtonActionPerformed
        // TODO add your handling code here:
        MailSettingsJDialog mailSettingsJDialog = new MailSettingsJDialog(this, true);
        mailSettingsJDialog.setLocationRelativeTo(this);
        mailSettingsJDialog.setVisible(true);
    }//GEN-LAST:event_msgSettingsButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            // TODO add your handling code here:
            utilities.saveSettings();
            System.exit(0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jAboutUsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAboutUsMenuItemActionPerformed
        // TODO add your handling code here:
        AboutUsGUI aboutUsGUI = new AboutUsGUI(this, true);
        aboutUsGUI.setLocationRelativeTo(this);
        aboutUsGUI.setVisible(true);
    }//GEN-LAST:event_jAboutUsMenuItemActionPerformed

    private void openWithMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openWithMenuItemActionPerformed
        // TODO add your handling code here:
        int selectedIdex = fileTable.getSelectedRow();
        if (selectedIdex != -1) {
            try {
                File file = (File) fileTable.getValueAt(selectedIdex, 0);
                File decrFile = encryption.decryptFile(file, new File("temp"), AppVariables.settingsInfo.getIMEI());
                if (openWithOtherApp(decrFile)) {
                    FileUpdateManager fileUpdateManager = new FileUpdateManager(decrFile, file);
                    new Thread(fileUpdateManager).start();
                    decrFile.deleteOnExit();
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }


        }

    }//GEN-LAST:event_openWithMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        int selectedIdex = fileTable.getSelectedRow();
        if (selectedIdex != -1) {
            try {
                File file = (File) fileTable.getValueAt(selectedIdex, 0);
                File decrFile = encryption.decryptFile(file, new File("temp"), AppVariables.settingsInfo.getIMEI());
                if (openFile(decrFile)) {
                    FileUpdateManager fileUpdateManager = new FileUpdateManager(decrFile, file);
                    new Thread(fileUpdateManager).start();
                    decrFile.deleteOnExit();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_openMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        // TODO add your handling code here:
        int selectedIdex = fileTable.getSelectedRow();
        if (selectedIdex != -1) {
            File file = (File) fileTable.getValueAt(selectedIdex, 0);
            if (JOptionPane.showConfirmDialog(this, "Do you want to Delete: \n"
                    + file.getName(), "Delete File", JOptionPane.YES_NO_OPTION)
                    == JOptionPane.YES_OPTION) {
                if (file.delete()) {
                    JOptionPane.showMessageDialog(this,
                            file.getName() + " Successfully deleted.",
                            "Delete File", JOptionPane.INFORMATION_MESSAGE);
                    AppVariables.settingsInfo.getFileInfos().remove(file.getAbsolutePath());
                    if (selectedFile != null) {
                        reloadFileTable(selectedFile);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Please select file you want to delete.",
                    "Delete File", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void refreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshMenuItemActionPerformed
        // TODO add your handling code here:
        DefaultMutableTreeNode seletedNode = (DefaultMutableTreeNode) folderTree.getLastSelectedPathComponent();
        if (seletedNode != null) {
            Object userObj = seletedNode.getUserObject();
            if (userObj instanceof File) {
                selectedFile = (File) userObj;
                reloadFileTable(selectedFile);
            }

        }

    }//GEN-LAST:event_refreshMenuItemActionPerformed

private void sendMailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMailButtonActionPerformed
    // TODO add your handling code here:
    NewMessageGUI newMessageGUI = new NewMessageGUI(this, rootPaneCheckingEnabled);
    newMessageGUI.setLocationRelativeTo(this);
    newMessageGUI.setVisible(true);
}//GEN-LAST:event_sendMailButtonActionPerformed

private void changeDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeDirectoryButtonActionPerformed
    new ChangeDirectoryDialog(this, true).setVisible(true);
    dispose();
}//GEN-LAST:event_changeDirectoryButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeDirectoryButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JButton extractToButton;
    private javax.swing.JTable fileTable;
    private javax.swing.JTree folderTree;
    private javax.swing.JMenuItem inboxMenuItem;
    private javax.swing.JMenuItem jAboutUsMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem mailSettingsMenuItem;
    private javax.swing.JButton messageButton;
    private javax.swing.JButton msgSettingsButton;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem openWithMenuItem;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JMenuItem refreshMenuItem;
    private javax.swing.JButton sendMailButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JButton uploadFileButton;
    // End of variables declaration//GEN-END:variables

    private void init() {

        fileTable.getColumnModel().getColumn(0).setCellRenderer(new FileTableCellRenderer());
        tableScrollPane.getViewport().setBackground(Color.WHITE);
    }

    public void loadTree() {
        File[] dirs = AppVariables.settingsInfo.getEncrHomeDir().listFiles();
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(AppVariables.settingsInfo.getEncrHomeDir());
        for (File dir : dirs) {
            if (dir.isDirectory()) {
                DefaultMutableTreeNode dirNode = new DefaultMutableTreeNode(dir);
                rootNode.add(dirNode);
            }
        }
        DefaultTreeModel treeModel = new DefaultTreeModel(rootNode, true);
        folderTree.setModel(treeModel);
        folderTree.setCellRenderer(new FolderTreeCellRenderer());
        this.setTitle("Hacking Resistance : "
                + AppVariables.settingsInfo.getEncrHomeDir().getName());
    }

    private void reloadFileTable(File folder) {
        DefaultTableModel tableModel = (DefaultTableModel) fileTable.getModel();
        tableModel.getDataVector().removeAllElements();
        File[] files = folder.listFiles();
        int fileCount = 0;
        if (files != null) {
            for (File file : files) {
                if (file.isFile()) {
                    fileCount++;
                    Object[] row = {file, convertToUnit(file.length()), getDate(new Date(file.lastModified()))};
                    tableModel.addRow(row);
                }
            }
            statusLabel.setText(fileCount + " files found !");
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    fileTable.updateUI();
                }
            });
        }
    }

    public String convertToUnit(long bytes) {
        double size = 0.0;

        if (bytes >= 1024 * 1024) {
            size = (double) bytes / (1024 * 1024);
            return round(size, 2) + " MB";
        } else if (bytes >= 1024) {
            size = (double) bytes / 1024;
            return round(size, 2) + " KB";
        } else {
            return bytes + " Bytes";
        }
    }

    public double round(double value, int dcmlPlace) {
        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(dcmlPlace, BigDecimal.ROUND_UP);
        return bd.doubleValue();
    }

    private String getDate(Date date) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss a");
        return dateFormat.format(date);
    }

//    public boolean isDragAcceptable(DropTargetDragEvent event) {
//        return event.isDataFlavorSupported(DataFlavor.javaFileListFlavor);
//    }
//
//    public boolean isDropAcceptable(DropTargetDropEvent event) {
//        return event.isDataFlavorSupported(DataFlavor.javaFileListFlavor);
//    }
    public void dragEnter(DropTargetDragEvent dtde) {
//        if (!isDragAcceptable(dtde)) {
//            dtde.rejectDrag();
//        }
        // System.out.println("0positin : " + dtde.getLocation());
    }

    public void dragOver(DropTargetDragEvent dtde) {
        // throw new UnsupportedOperationException("Not supported yet.");
        //   System.out.println("0positin : " + dtde.getLocation());
    }

    public void dropActionChanged(DropTargetDragEvent dtde) {
        // throw new UnsupportedOperationException("Not supported yet.");
        //     System.out.println("positin : " + dtde.getLocation());
    }

    public void dragExit(DropTargetEvent dte) {
        // throw new UnsupportedOperationException("Not supported yet.");
        //    System.out.println("positin : " + dte.getDropTargetContext());
    }

    public void drop(DropTargetDropEvent dtde) {
        List datList = null;
        DefaultMutableTreeNode lastSelectedNode = (DefaultMutableTreeNode) folderTree.getLastSelectedPathComponent();
        if (lastSelectedNode != null) {
            Object obj = lastSelectedNode.getUserObject();
            if (obj instanceof File) {
                File destination = (File) obj;
                if (isDropEvent(dtde)) {
                    try {
                        dtde.acceptDrop(DnDConstants.ACTION_MOVE);
                        Transferable transferable = dtde.getTransferable();
                        Object transferData = transferable.getTransferData(DataFlavor.javaFileListFlavor);
                        if (transferData instanceof List) {
                            datList = (List) transferData;
                            if (datList != null) {
                                Iterator iterator = datList.iterator();
                                try {
                                    while (iterator.hasNext()) {
                                        Object fileObj = iterator.next();
                                        if (fileObj instanceof File) {
                                            copyFile((File) fileObj, destination);
                                        }
                                    }
                                } catch (Exception ex) {
                                    JOptionPane.showMessageDialog(rootPane, "Failed To copy File ", "Copy error", JOptionPane.CLOSED_OPTION);

                                }
                            }

                        }
                    } catch (UnsupportedFlavorException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "please select a folder ", "Copy error", JOptionPane.CLOSED_OPTION);
        }
    }

    private boolean isDropEvent(DropTargetDropEvent dtde) {
        return dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor);
    }

    void copyFile(File src, File dest) throws FileNotFoundException, IOException,
            NoSuchAlgorithmException, NoSuchPaddingException, BadPaddingException,
            InvalidKeyException, IllegalBlockSizeException {
        File selectedFile = src;
        File destDir = dest;
        String fileName = destDir.getAbsolutePath() + File.separator + selectedFile.getName();
        if (!new File(fileName).exists()) {
            FileInfoBean fileInfoBean = new FileInfoBean();
            fileInfoBean.setFileName(fileName);
            AppVariables.settingsInfo.getFileInfos().put(fileName, fileInfoBean);
            encryption.encryptFile(selectedFile, destDir, AppVariables.settingsInfo.getIMEI(), false);
            JOptionPane.showMessageDialog(this,
                    selectedFile.getName() + "\nSuccessfully uploaded.",
                    "Upload File", JOptionPane.INFORMATION_MESSAGE);
            reloadFileTable(destDir);
            if (!src.delete()) {
                src.deleteOnExit();
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    selectedFile.getName() + "\n exists.",
                    "Upload File", JOptionPane.ERROR_MESSAGE);
        }

    }

    private boolean openFile(File decrFile) {
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop desktop = Desktop.getDesktop();
                desktop.open(decrFile);
                return true;
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Failed to open file \n Please install Gnome-lib API for this operating system form\n  http://ftp.gnome.org/pub/GNOME/sources/gnome-libs/1.4/", "Error in opening file", JOptionPane.WARNING_MESSAGE);

                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Failed to open file \n Please install Gnome-lib API for this operating system form\n  http://ftp.gnome.org/pub/GNOME/sources/gnome-libs/1.4/", "Error in opening file", JOptionPane.WARNING_MESSAGE);

            return false;
        }
    }

    private boolean openWithOtherApp(File decrFile) {
        try {
            JFileChooser chooser = new JFileChooser() {

                @Override
                public void approveSelection() {
                    File seFile = getSelectedFile();
                    if (seFile.exists()) {
                        super.approveSelection();
                    } else {
                        JOptionPane.showMessageDialog(this, "The selected application does not exist", "Invalid File", WIDTH);
                    }
                }
            };
            int option = chooser.showOpenDialog(this);
            if (option == JOptionPane.OK_OPTION) {
                File selApp = chooser.getSelectedFile();
                System.out.println("Application = " + selApp.getAbsolutePath());
                Process p = new ProcessBuilder(selApp.getAbsolutePath(), decrFile.getAbsolutePath()).start();
                return true;
            } else {
                return false;
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "The selected application does supports this file", "Invalid File", WIDTH);
            return false;
        }

    }

    private boolean checkForExist(File file, File selectedFile) {
        String fileName = file.getName();
        File destFile = new File(selectedFile, fileName);
        if (destFile.exists()) {
            int option = JOptionPane.showConfirmDialog(this,
                    selectedFile.getName() + " " + fileName + " already  exists, \n do you want to overwrite ? ",
                    "Selected File", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                return true;
            } else {
                return false;
            }
        } else {
            return true;
        }
    }
}
