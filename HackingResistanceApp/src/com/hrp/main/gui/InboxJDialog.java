/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InboxJDialog.java
 *
 * Created on Aug 6, 2011, 12:51:00 PM
 */
package com.hrp.main.gui;

import com.hrp.ecry.AESEncryption;
import com.hrp.mail.beans.EmailBean;
import com.hrp.util.AppVariables;
import com.hrp.gui.mgmt.AttachmentTableCellRenderer;
import com.hrp.gui.mgmt.InboxTableCellRenderer;
import com.hrp.mail.mgr.ManageMail;
import com.hrp.mail.utils.MailSettingsManager;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TF-PRG-03
 */
public class InboxJDialog extends javax.swing.JDialog implements Runnable {

    /**class variables  */
    ManageMail manageMail = null;

    /** Creates new form InboxJDialog */
    public InboxJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();

        messageTable.getColumnModel().getColumn(1).setCellRenderer(new InboxTableCellRenderer(1));
        messageTable.getColumnModel().getColumn(2).setCellRenderer(new InboxTableCellRenderer(2));
        messageTable.getColumnModel().getColumn(3).setCellRenderer(new InboxTableCellRenderer(3));
       manageMail = new ManageMail();
        //   windowOpened = true;
        initTable();
        attachmentTable.getColumnModel().getColumn(1).setCellRenderer(new AttachmentTableCellRenderer(1));
        //  attachmentTable.getColumnModel().getColumn(2).setCellRenderer(new AttachmentTableCellRenderer(2));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fromTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        subjectTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        attachmentTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        downloadingLabel = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        jCloseButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Secure Inbox");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Message Body"));

        jLabel1.setText("From :");

        fromTextField.setEditable(false);

        jLabel2.setText("Subject :");

        subjectTextField.setEditable(false);

        jLabel3.setText("Body :");

        jLabel4.setText("Attachments:");

        attachmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "File Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        attachmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                attachmentTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(attachmentTable);
        attachmentTable.getColumnModel().getColumn(0).setMinWidth(100);
        attachmentTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        attachmentTable.getColumnModel().getColumn(0).setMaxWidth(100);
        attachmentTable.getColumnModel().getColumn(1).setMinWidth(700);
        attachmentTable.getColumnModel().getColumn(1).setPreferredWidth(700);
        attachmentTable.getColumnModel().getColumn(1).setMaxWidth(700);

        jScrollPane1.setViewportView(jTextPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(subjectTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fromTextField)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        messageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "From", "Received mail Id ", "Send Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        messageTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                messageTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(messageTable);
        messageTable.getColumnModel().getColumn(0).setMinWidth(40);
        messageTable.getColumnModel().getColumn(0).setPreferredWidth(40);
        messageTable.getColumnModel().getColumn(0).setMaxWidth(40);
        messageTable.getColumnModel().getColumn(1).setMinWidth(350);
        messageTable.getColumnModel().getColumn(1).setPreferredWidth(350);
        messageTable.getColumnModel().getColumn(1).setMaxWidth(350);
        messageTable.getColumnModel().getColumn(2).setMinWidth(400);
        messageTable.getColumnModel().getColumn(2).setPreferredWidth(400);
        messageTable.getColumnModel().getColumn(2).setMaxWidth(400);
        messageTable.getColumnModel().getColumn(3).setMinWidth(100);
        messageTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        messageTable.getColumnModel().getColumn(3).setMaxWidth(100);

        jProgressBar1.setString("Downloading");

        downloadingLabel.setText("Downloading....");

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jCloseButton.setText("Close");
        jCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCloseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(downloadingLabel)
                .addGap(59, 59, 59)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jCloseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCloseButton, refreshButton});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(refreshButton)
                        .addComponent(jCloseButton))
                    .addComponent(downloadingLabel))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 874, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 858, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jSeparator1, jSeparator2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCloseButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jCloseButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //  windowOpened = false;
    }//GEN-LAST:event_formWindowClosing

    private void messageTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageTableMouseClicked
        // To Display the messge Details
        int selectedRow = messageTable.getSelectedRow();
        if (selectedRow != -1) {
            int columnCount = messageTable.getSelectedColumn();
            System.out.println("Column count  : " + columnCount);
            if (columnCount > 0 && columnCount <= 2) {
                // The Selected column contains the message details
                //to be displayed in the fields
                EmailBean emailBean = (EmailBean) messageTable.getValueAt(selectedRow, columnCount);
                System.out.println("The email bean" + emailBean.getSubject());
                showMessageDetais(emailBean);

            }
        }
    }//GEN-LAST:event_messageTableMouseClicked

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        initTable();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void attachmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attachmentTableMouseClicked
        // TODO add your handling code here:
        int count = evt.getClickCount();
        if (count == 2) {
            int selectedRow = attachmentTable.getSelectedRow();
            int selectedCol = attachmentTable.getSelectedColumnCount();
            if (selectedCol > 0) {
                Object data = attachmentTable.getValueAt(selectedRow, 1);
                System.out.println("" + data);
                downlaodFile(data);
            }
        }
    }//GEN-LAST:event_attachmentTableMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

        new Thread(this).start();
        if(!AppVariables.mailDownloading){

        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                InboxJDialog dialog = new InboxJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable attachmentTable;
    private javax.swing.JLabel downloadingLabel;
    private javax.swing.JTextField fromTextField;
    private javax.swing.JButton jCloseButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextPane jTextPane;
    private javax.swing.JTable messageTable;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField subjectTextField;
    // End of variables declaration//GEN-END:variables

    public void initTable() {
        try {
            ArrayList<EmailBean> emails = manageMail.getAllMailInfo();
            if (emails != null) {
                DefaultTableModel defaultModel = (DefaultTableModel) messageTable.getModel();
                defaultModel.getDataVector().removeAllElements(); // to removeall elements
                for (int i = 0; i < emails.size(); i++) {
                    Object[] mailContents = new Object[4];
                    mailContents[0] = new String("" + (i + 1));
                    EmailBean emailBean = emails.get(i);
                    mailContents[1] = emailBean; // For From
                    mailContents[2] = emailBean; // For Subject
                    mailContents[3] = emailBean; // For Date time
                    defaultModel.addRow(mailContents);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InboxJDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InboxJDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InboxJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showMessageDetais(EmailBean emailBean) {
        // To display components
        System.out.println("In show message");
        fromTextField.setText(emailBean.getFrom());
        subjectTextField.setText(emailBean.getSubject());
        //bodyTextArea.setText(emailBean.getBody());
        jTextPane.setContentType("text/html");
        jTextPane.setText(emailBean.getBody());
        ArrayList<File> attachmentArray = emailBean.getFileArray();
        DefaultTableModel attachTableModel = (DefaultTableModel) attachmentTable.getModel();
        attachTableModel.getDataVector().removeAllElements();
        if (attachmentArray != null) {
            for (int i = 0; i < attachmentArray.size(); i++) {
                Object[] colums = new Object[3];
                colums[0] = "" + (i + 1); //
                colums[1] = attachmentArray.get(i);
                //  colums[2] = attachmentArray.get(i);
                attachTableModel.addRow(colums);
            }
        }
        //attachmentTable.setModel(attachTableModel);

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                attachmentTable.updateUI();
            }
        });
    }

    private void downlaodFile(Object data) {
        if (data instanceof File) {
            File file = (File) data;
            JFileChooser jFileChooser = new JFileChooser();
            jFileChooser.setFileSelectionMode(jFileChooser.DIRECTORIES_ONLY);
            if (jFileChooser.showDialog(this, "Select Location") == JFileChooser.APPROVE_OPTION) {
                try {
                    File selectedDir = jFileChooser.getSelectedFile();
                    AESEncryption encryption = new AESEncryption();
                    File decrFile = encryption.decryptFile(file, selectedDir,
                            AppVariables.settingsInfo.getIMEI());
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(InboxJDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(InboxJDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(InboxJDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchPaddingException ex) {
                    Logger.getLogger(InboxJDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvalidKeyException ex) {
                    Logger.getLogger(InboxJDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalBlockSizeException ex) {
                    Logger.getLogger(InboxJDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (BadPaddingException ex) {
                    Logger.getLogger(InboxJDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void run() {
        while (true) {
            if (AppVariables.downloading) {
                jProgressBar1.setIndeterminate(true);
                downloadingLabel.setText("downloading...");
                //System.out.println("SAY HAI");
               // AppVariables.downloading = false;
            } else {
                jProgressBar1.setIndeterminate(false);
                downloadingLabel.setText("               ");
            }
        }

    }
}
